version: '3.8'

# Monitoring Stack for Neural Tools
# Implements ADR-053 production monitoring requirements

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: neural-tools-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus-alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - l9-monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: neural-tools-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=neural-tools-2025
      - GF_INSTALL_PLUGINS=redis-datasource,neo4j-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SMTP_ENABLED=false
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - l9-monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # AlertManager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: neural-tools-alertmanager
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - l9-monitoring
    restart: unless-stopped

  # Prometheus exporter for Neo4j metrics
  neo4j-exporter:
    image: ghcr.io/neo4j-contrib/neo4j-prometheus-exporter:latest
    container_name: neo4j-metrics-exporter
    environment:
      - NEO4J_HOST=host.docker.internal:47687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=graphrag-password
      - EXPORTER_PORT=9400
    ports:
      - "9400:9400"
    networks:
      - l9-monitoring
    restart: unless-stopped

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: neural-tools-node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - l9-monitoring
    restart: unless-stopped

  # Custom metrics exporter for neural-tools
  neural-metrics-exporter:
    build:
      context: .
      dockerfile: docker/Dockerfile.metrics-exporter
    container_name: neural-tools-metrics-exporter
    environment:
      - NEO4J_URI=bolt://host.docker.internal:47687
      - NEO4J_PASSWORD=graphrag-password
      - QDRANT_HOST=host.docker.internal
      - QDRANT_PORT=46333
      - REDIS_HOST=host.docker.internal
      - REDIS_PORT=46379
      - METRICS_PORT=9200
    ports:
      - "9200:9200"
    networks:
      - l9-monitoring
    volumes:
      - ./neural-tools:/app/neural-tools:ro
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:

networks:
  l9-monitoring:
    driver: bridge
    name: l9-monitoring-network