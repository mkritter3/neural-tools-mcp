[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-l9-template"
version = "1.0.0"
description = "Production-ready GraphRAG implementation with Neo4j and Qdrant"
authors = [{name = "L9 Engineering"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["graphrag", "neo4j", "qdrant", "vector-search", "graph-database", "retrieval"]

dependencies = [
    "neo4j>=5.22.0",
    "qdrant-client>=1.10.0",
    "torch>=2.3.0",
    "transformers>=4.40.0",
    "sentence-transformers>=2.7.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "structlog>=23.0.0",
    "watchdog>=3.0.0",
    "mcp>=1.0.0",
    "fastmcp>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/your-org/l9-graphrag"
"Bug Reports" = "https://github.com/your-org/l9-graphrag/issues"
"Source" = "https://github.com/your-org/l9-graphrag"
"Documentation" = "https://l9-graphrag.readthedocs.io/"

[project.scripts]
l9-graphrag-server = "mcp.neural_server_stdio:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "benchmark: marks tests as performance benchmarks",
    "resilience: marks tests as resilience/recovery tests",
    "accuracy: marks tests as accuracy validation tests", 
    "stress: marks tests as stress/load tests",
    "integration: marks tests as integration tests",
    "contract: marks tests as API contract validation tests"
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]