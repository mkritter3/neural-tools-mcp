#!/bin/bash
# L9 Neural Memory MCP Add Command
# Adds L9 dual-path memory architecture to any project

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Auto-detect L9 template location
L9_TEMPLATE_DIR=""
if [[ -f "$(pwd)/core/neural-memory-mcp.py" ]]; then
    L9_TEMPLATE_DIR="$(pwd)"
elif [[ -f "$(dirname "$0")/core/neural-memory-mcp.py" ]]; then
    L9_TEMPLATE_DIR="$(cd "$(dirname "$0")" && pwd)"
elif [[ -f "$HOME/.l9-neural/core/neural-memory-mcp.py" ]]; then
    L9_TEMPLATE_DIR="$HOME/.l9-neural"
else
    log_error "L9 Neural Flow template not found. Please run from template directory or install globally."
    exit 1
fi

show_help() {
    echo "üîÆ L9 Neural Memory MCP Add Command"
    echo
    echo "USAGE:"
    echo "  mcp add [options] [project-path]"
    echo
    echo "OPTIONS:"
    echo "  --scope local|project|user    Configuration scope (default: project)"
    echo "  --no-hooks                    Skip installing Claude Code hooks"
    echo "  --no-auto-indexing           Disable automatic indexing"
    echo "  --help, -h                    Show this help"
    echo
    echo "EXAMPLES:"
    echo "  mcp add                       # Add to current project with project scope"
    echo "  mcp add /path/to/project      # Add to specific project"
    echo "  mcp add --scope user          # Add to user scope (all projects)"
    echo "  mcp add --no-hooks            # Add without hooks"
    echo
    echo "DESCRIPTION:"
    echo "  Adds L9 Neural Memory with dual-path architecture to any project:"
    echo "  ‚Ä¢ üß† Conversation memory with 95%+ recall accuracy"
    echo "  ‚Ä¢ üîç Hybrid search (BM25 + semantic + AST)"
    echo "  ‚Ä¢ ‚ö° Project isolation with dedicated containers"
    echo "  ‚Ä¢ üè∑Ô∏è Token optimization (<150K/user/day)"
    echo "  ‚Ä¢ üîÑ Multi-model A/B testing capabilities"
}

add_mcp_to_project() {
    local project_path="${1:-.}"
    local scope="${2:-project}"
    local enable_hooks="${3:-true}"
    local enable_auto_indexing="${4:-true}"
    
    project_path="$(cd "$project_path" && pwd)"
    
    log_info "üîÆ Adding L9 Neural Memory to project"
    log_info "üìÅ Path: $project_path"
    log_info "üéØ Scope: $scope"
    log_info "üìé Hooks: $([ "$enable_hooks" = "true" ] && echo "enabled" || echo "disabled")"
    log_info "üîÑ Auto-indexing: $([ "$enable_auto_indexing" = "true" ] && echo "enabled" || echo "disabled")"
    echo
    
    # Run neural-setup.py first to set up the infrastructure
    setup_args="$project_path"
    [ "$enable_hooks" = "false" ] && setup_args="$setup_args --no-hooks"
    [ "$enable_auto_indexing" = "false" ] && setup_args="$setup_args --no-auto-indexing"
    
    log_info "üöÄ Setting up L9 infrastructure..."
    if ! python3 "$L9_TEMPLATE_DIR/neural-setup.py" $setup_args; then
        log_error "Failed to setup L9 infrastructure"
        return 1
    fi
    
    # Now add the MCP server using claude mcp add
    local server_name="l9-neural-memory"
    local server_command="python3"
    local server_args="$L9_TEMPLATE_DIR/core/neural-memory-mcp.py"
    local pythonpath_env="$L9_TEMPLATE_DIR/neural-system"
    
    log_info "üì° Adding MCP server to Claude Code..."
    
    # Build the claude mcp add command
    local mcp_add_cmd="claude mcp add"
    
    # Add scope
    [ "$scope" != "project" ] && mcp_add_cmd="$mcp_add_cmd --scope $scope"
    
    # Add environment variables
    mcp_add_cmd="$mcp_add_cmd --env PYTHONPATH=$pythonpath_env"
    mcp_add_cmd="$mcp_add_cmd --env PROJECT_PATH=$project_path"
    mcp_add_cmd="$mcp_add_cmd --env L9_TEMPLATE_DIR=$L9_TEMPLATE_DIR"
    
    # Add server name and command
    mcp_add_cmd="$mcp_add_cmd $server_name -- $server_command $server_args"
    
    log_info "üîß Running: $mcp_add_cmd"
    
    if eval "$mcp_add_cmd"; then
        log_success "üéâ L9 Neural Memory MCP server added successfully!"
        echo
        log_info "üìã What's available now:"
        log_info "  ‚Ä¢ Conversation memory storage and recall"
        log_info "  ‚Ä¢ Semantic code search across your project"  
        log_info "  ‚Ä¢ AST-aware understanding of code structure"
        log_info "  ‚Ä¢ Multi-model embedding comparisons"
        log_info "  ‚Ä¢ Project isolation with dedicated containers"
        echo
        log_info "üí° Try asking Claude:"
        log_info "  - 'Remember that we decided to use JWT for auth'"
        log_info "  - 'Find all database connection logic'"
        log_info "  - 'What did we discuss about performance yesterday?'"
        echo
        log_info "üîç Check server status with: /mcp"
        
        # Show scope-specific information
        case "$scope" in
            "project")
                log_info "üìÅ Configuration saved to .mcp.json (shared with team)"
                ;;
            "user")
                log_info "üë§ Configuration saved to user settings (available in all projects)"
                ;;
            "local")
                log_info "üíª Configuration saved locally (private to you in this project)"
                ;;
        esac
        
    else
        log_error "Failed to add MCP server to Claude Code"
        log_warn "You may need to install Claude Code or check your configuration"
        return 1
    fi
}

# Parse command line arguments
SCOPE="project"
ENABLE_HOOKS="true" 
ENABLE_AUTO_INDEXING="true"
PROJECT_PATH="."

while [[ $# -gt 0 ]]; do
    case $1 in
        --scope)
            SCOPE="$2"
            shift 2
            ;;
        --no-hooks)
            ENABLE_HOOKS="false"
            shift
            ;;
        --no-auto-indexing)
            ENABLE_AUTO_INDEXING="false"
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        -*)
            log_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
        *)
            PROJECT_PATH="$1"
            shift
            ;;
    esac
done

# Validate scope
case "$SCOPE" in
    local|project|user)
        ;;
    *)
        log_error "Invalid scope: $SCOPE. Must be local, project, or user"
        exit 1
        ;;
esac

# Validate project path
if [[ ! -d "$PROJECT_PATH" ]]; then
    log_error "Project path does not exist: $PROJECT_PATH"
    exit 1
fi

# Run the main function
add_mcp_to_project "$PROJECT_PATH" "$SCOPE" "$ENABLE_HOOKS" "$ENABLE_AUTO_INDEXING"