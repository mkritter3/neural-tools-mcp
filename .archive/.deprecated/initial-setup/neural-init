#!/bin/bash
# Neural Flow Project Initializer - Global CLI Tool
# One-command project setup with neural intelligence

set -e

# Auto-detect Neural Flow installation
NEURAL_FLOW_DIR=""
if [[ -f "$(pwd)/scripts/neural-flow.sh" ]]; then
    NEURAL_FLOW_DIR="$(pwd)"
elif [[ -f "$(dirname "$0")/../scripts/neural-flow.sh" ]]; then
    NEURAL_FLOW_DIR="$(cd "$(dirname "$0")/.." && pwd)"
elif [[ -f "$HOME/.neural-flow/scripts/neural-flow.sh" ]]; then
    NEURAL_FLOW_DIR="$HOME/.neural-flow"
else
    echo "‚ùå Neural Flow not found. Please run from neural-flow directory or install globally."
    exit 1
fi

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m' 
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warn() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

# Enhanced project initialization with templates
init_project() {
    local project_name="$1"
    local template="${2:-general}"
    local current_dir="$(pwd)"
    
    if [[ -z "$project_name" ]]; then
        log_error "Usage: neural-init <project-name> [template]"
        echo "Templates: general, python, javascript, rust, go, react, nextjs"
        exit 1
    fi
    
    log_info "üîÆ Initializing Neural Flow project: $project_name"
    log_info "üìÅ Template: $template"
    log_info "üìç Location: $current_dir/$project_name"
    
    # Create project in current directory (not in Neural Flow projects/)
    local project_dir="$current_dir/$project_name"
    mkdir -p "$project_dir"/{src,.claude/chroma,.claude/memory}
    
    # Template-specific setup
    setup_template "$project_dir" "$template"
    
    # Create .mcp.json with absolute path to neural-flow
    cat > "$project_dir/.mcp.json" << EOF
{
  "neural-flow": {
    "command": "docker",
    "args": [
      "compose",
      "--project-directory", 
      "$NEURAL_FLOW_DIR",
      "--project-name",
      "neural-flow-${project_name}",
      "exec",
      "-T",
      "neural-flow",
      "/app/docker-entrypoint.sh"
    ],
    "env": {
      "PROJECT_NAME": "$project_name",
      "PROJECT_PATH": "$project_dir",
      "USE_QODO_EMBED": "true",
      "ENABLE_AB_TESTING": "false",
      "ENABLE_PERFORMANCE_MONITORING": "true"
    }
  }
}
EOF
    
    # Create optimized Claude Code settings
    cat > "$project_dir/.claude/settings.json" << EOF
{
  "enableAllProjectMcpServers": true,
  "env": {
    "PROJECT_NAME": "$project_name",
    "USE_QODO_EMBED": "true",
    "NEURAL_FLOW_DIR": "$NEURAL_FLOW_DIR"
  },
  "permissions": {
    "allow": [
      "Bash(*)",
      "Read(*)",
      "Edit(*)", 
      "Write(*)",
      "Glob(*)",
      "Grep(*)"
    ],
    "deny": [
      "Read(.env*)",
      "Read(secrets/**)",
      "Read(*.key)",
      "Read(credentials.*)"
    ]
  },
  "hooks": {
    "PostToolUse": [
      {
        "matcher": "Edit|MultiEdit|Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'üß† Neural Flow: Code updated, memory will adapt'"
          }
        ]
      }
    ]
  }
}
EOF

    # Create startup script for easy development
    cat > "$project_dir/neural-start.sh" << EOF
#!/bin/bash
# Neural Flow Development Starter
# Run this to start coding with neural intelligence

echo "üîÆ Starting Neural Flow for $project_name..."

# Start neural flow container
"$NEURAL_FLOW_DIR/scripts/neural-flow.sh" start "$project_name"

# Wait for container to be ready
sleep 3

echo "‚úÖ Neural Flow ready! Starting Claude Code..."
echo
echo "üß† Neural capabilities available:"
echo "   ‚Ä¢ Semantic code search"
echo "   ‚Ä¢ Conversation memory"
echo "   ‚Ä¢ AST-aware understanding"
echo "   ‚Ä¢ Multi-model embeddings"
echo

# Start Claude Code
claude
EOF
    chmod +x "$project_dir/neural-start.sh"
    
    # Create stop script
    cat > "$project_dir/neural-stop.sh" << EOF
#!/bin/bash
# Stop Neural Flow container
"$NEURAL_FLOW_DIR/scripts/neural-flow.sh" stop "$project_name"
echo "üõë Neural Flow stopped for $project_name"
EOF
    chmod +x "$project_dir/neural-stop.sh"
    
    # Create project README
    create_readme "$project_dir" "$project_name" "$template"
    
    log_success "üéâ Project $project_name initialized with Neural Flow!"
    echo
    log_info "Next steps:"
    log_info "  cd $project_name"
    log_info "  ./neural-start.sh    # Start neural flow + Claude Code"
    echo
    log_info "Or manually:"
    log_info "  cd $project_name"  
    log_info "  $NEURAL_FLOW_DIR/scripts/neural-flow.sh start $project_name"
    log_info "  claude"
}

# Setup template-specific files and configurations
setup_template() {
    local project_dir="$1"
    local template="$2"
    
    case "$template" in
        python)
            create_python_template "$project_dir"
            ;;
        javascript|js|node)
            create_javascript_template "$project_dir"
            ;;
        react)
            create_react_template "$project_dir"
            ;;
        nextjs)
            create_nextjs_template "$project_dir"
            ;;
        rust)
            create_rust_template "$project_dir"
            ;;
        go)
            create_go_template "$project_dir"
            ;;
        general|*)
            create_general_template "$project_dir"
            ;;
    esac
}

create_python_template() {
    local project_dir="$1"
    
    # Create Python project structure
    mkdir -p "$project_dir/src" "$project_dir/tests"
    
    cat > "$project_dir/src/main.py" << 'EOF'
"""
Neural Flow Enhanced Python Project
AI-powered development with semantic understanding
"""

def main():
    print("üîÆ Neural Flow Python project started!")
    print("Ask Claude about this code - it has full context awareness")

if __name__ == "__main__":
    main()
EOF

    cat > "$project_dir/requirements.txt" << 'EOF'
# Add your dependencies here
# Neural Flow will understand them semantically
EOF

    cat > "$project_dir/.gitignore" << 'EOF'
__pycache__/
*.pyc
*.pyo
.env
.venv/
venv/
.pytest_cache/
.coverage
dist/
build/
*.egg-info/
EOF
}

create_javascript_template() {
    local project_dir="$1"
    
    mkdir -p "$project_dir/src"
    
    cat > "$project_dir/package.json" << 'EOF'
{
  "name": "neural-flow-js-project",
  "version": "1.0.0",
  "description": "Neural Flow enhanced JavaScript project",
  "main": "src/index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "node --watch src/index.js"
  }
}
EOF

    cat > "$project_dir/src/index.js" << 'EOF'
/**
 * Neural Flow Enhanced JavaScript Project
 * AI-powered development with semantic code understanding
 */

console.log('üîÆ Neural Flow JavaScript project started!');
console.log('Ask Claude about this code - it has full context awareness');

// Your code here - Claude will understand the patterns and help you build
EOF

    cat > "$project_dir/.gitignore" << 'EOF'
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
dist/
build/
EOF
}

create_react_template() {
    local project_dir="$1"
    
    mkdir -p "$project_dir/src/components"
    
    cat > "$project_dir/package.json" << 'EOF'
{
  "name": "neural-flow-react-project",
  "version": "1.0.0",
  "description": "Neural Flow enhanced React project",
  "main": "src/index.js",
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build"
  }
}
EOF

    cat > "$project_dir/src/App.jsx" << 'EOF'
/**
 * Neural Flow Enhanced React App
 * AI understands component relationships and state flow
 */

import React from 'react';

function App() {
  return (
    <div className="App">
      <header>
        <h1>üîÆ Neural Flow React Project</h1>
        <p>Ask Claude about components - it understands React patterns!</p>
      </header>
    </div>
  );
}

export default App;
EOF
}

create_general_template() {
    local project_dir="$1"
    
    mkdir -p "$project_dir/src" "$project_dir/docs"
    
    cat > "$project_dir/src/README.md" << 'EOF'
# Source Code

Your project source code goes here. Neural Flow will:

- üß† Understand your code patterns semantically
- üîç Enable fast, intelligent code search  
- üí≠ Remember conversation context about your code
- ‚ö° Provide AST-aware suggestions and refactoring
EOF
}

create_readme() {
    local project_dir="$1"
    local project_name="$2"  
    local template="$3"
    
    cat > "$project_dir/README.md" << EOF
# $project_name

Neural Flow enhanced $template project with L9-grade AI intelligence.

## üîÆ Neural Capabilities

This project has **semantic understanding** powered by Neural Flow:

- **üß† Conversation Memory**: Claude remembers all context about your code
- **üîç Intelligent Search**: Ask "find authentication logic" and get semantic results  
- **‚ö° AST Awareness**: Understands code structure, not just text matching
- **üè∑Ô∏è Smart Categorization**: Automatic tagging and organization
- **üîÑ Multi-Model**: A/B testing between embedding models for best performance

## üöÄ Getting Started

### Option 1: One Command Start
\`\`\`bash
./neural-start.sh
\`\`\`

### Option 2: Manual Start  
\`\`\`bash
# Start neural flow
$NEURAL_FLOW_DIR/scripts/neural-flow.sh start $project_name

# Open Claude Code  
claude
\`\`\`

### Option 3: Development Mode
\`\`\`bash
# Start with monitoring
$NEURAL_FLOW_DIR/scripts/neural-flow.sh start $project_name
$NEURAL_FLOW_DIR/scripts/neural-flow.sh logs $project_name  # In another terminal
claude  # In another terminal
\`\`\`

## üí° Using Neural Intelligence

Once Claude Code is running, you can:

\`\`\`
# Semantic code search
"Find all database connection logic"
"Show me error handling patterns" 
"Where do we validate user input?"

# Conversation memory
"Remember that we decided to use JWT for auth"
"What was that bug we discussed yesterday?"
"Add this to our technical decisions"

# Code understanding
"Explain this function's purpose"
"How does authentication flow work?"
"What would happen if I change this parameter?"
\`\`\`

## üõ†Ô∏è Project Management

\`\`\`bash
# Stop neural flow when done
./neural-stop.sh

# Monitor performance
$NEURAL_FLOW_DIR/scripts/neural-flow.sh logs $project_name

# Debug container
$NEURAL_FLOW_DIR/scripts/neural-flow.sh shell $project_name
\`\`\`

## üìä Performance Features

- **Code-Specific Embeddings**: Qodo-Embed-1.5B optimized for code understanding
- **AST-Aware Chunking**: Preserves semantic boundaries vs line-based splitting  
- **Multi-Model Support**: A/B testing between embedding approaches
- **Local Processing**: All intelligence runs locally, no external API dependencies

## üîß Configuration

Customize neural behavior in \`.claude/settings.json\`:

\`\`\`json
{
  "env": {
    "USE_QODO_EMBED": "true",        // Code-specific embeddings
    "ENABLE_AB_TESTING": "false",    // Compare embedding models  
    "ENABLE_PERFORMANCE_MONITORING": "true"  // Track metrics
  }
}
\`\`\`

---

**üéâ Happy coding with neural intelligence!** 

Your AI assistant now has deep understanding of your project structure, patterns, and decisions.
EOF
}

# Show available templates
show_templates() {
    echo "üìã Available Neural Flow Templates:"
    echo
    echo "  general     - Basic project structure"
    echo "  python      - Python project with proper structure"
    echo "  javascript  - Node.js/JavaScript project"  
    echo "  react       - React application"
    echo "  nextjs      - Next.js application"
    echo "  rust        - Rust project with Cargo"
    echo "  go          - Go module project"
    echo
    echo "Usage: neural-init <project-name> [template]"
    echo "Example: neural-init my-ai-app python"
}

# Main
case "${1:-}" in
    --templates|templates)
        show_templates
        ;;
    --help|help|-h)
        echo "üîÆ Neural Flow Project Initializer"
        echo
        echo "USAGE:"
        echo "  neural-init <project-name> [template]"
        echo  
        echo "EXAMPLES:"
        echo "  neural-init my-awesome-app           # General template"
        echo "  neural-init my-python-ai python     # Python template"
        echo "  neural-init my-react-app react      # React template"
        echo
        show_templates
        ;;
    "")
        echo "‚ùå Project name required"
        echo "Usage: neural-init <project-name> [template]"
        echo "Run 'neural-init --help' for more options"
        exit 1
        ;;
    *)
        init_project "$1" "$2"
        ;;
esac