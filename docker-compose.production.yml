# Production Docker Compose Configuration
# Phase 3 Intelligent Caching Layer - Production Ready
version: '3.8'

services:
  # Redis Cache Instance - For intelligent caching
  redis-cache:
    image: redis:7-alpine
    container_name: neural-redis-cache-prod
    restart: always
    command: >
      redis-server
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-backlog 511
      --tcp-keepalive 300
      --timeout 0
      --protected-mode yes
      --requirepass ${REDIS_CACHE_PASSWORD}
    ports:
      - "${REDIS_CACHE_PORT:-6379}:6379"
    volumes:
      - redis-cache-data:/data
      - ./redis/redis-cache.conf:/usr/local/etc/redis/redis.conf:ro
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neural-network
    deploy:
      resources:
        limits:
          memory: 2.5G
        reservations:
          memory: 512M

  # Redis Queue Instance - For job processing and DLQ
  redis-queue:
    image: redis:7-alpine
    container_name: neural-redis-queue-prod
    restart: always
    command: >
      redis-server
      --maxmemory 1gb
      --maxmemory-policy noeviction
      --save 900 1
      --save 300 10
      --appendonly yes
      --appendfsync everysec
      --requirepass ${REDIS_QUEUE_PASSWORD}
    ports:
      - "${REDIS_QUEUE_PORT:-6380}:6379"
    volumes:
      - redis-queue-data:/data
      - ./redis/redis-queue.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - neural-network
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 256M

  # Neo4j GraphRAG Database
  neo4j:
    image: neo4j:5.22-enterprise
    container_name: neural-neo4j-prod
    restart: always
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    environment:
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_server_memory_pagecache__size=2G
      - NEO4J_db_tx__log_rotation_retention__policy=10G
      - NEO4J_server_metrics_enabled=true
      - NEO4J_server_metrics_prometheus_enabled=true
      - NEO4J_server_metrics_prometheus_endpoint=0.0.0.0:2004
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - neural-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.10.0
    container_name: neural-qdrant-prod
    restart: always
    ports:
      - "${QDRANT_HTTP_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant-storage:/qdrant/storage
      - ./qdrant/config.yaml:/qdrant/config/production.yaml:ro
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__HOST=0.0.0.0
      - QDRANT__LOG_LEVEL=INFO
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
      - QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD=100000
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - neural-network
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 1G

  # Nomic Embeddings Service
  embeddings:
    image: neural-flow:nomic-v2-production
    container_name: neural-embeddings-prod
    restart: always
    ports:
      - "${NOMIC_PORT:-8000}:8000"
    environment:
      - EMBED_DIM=768
      - MODEL_NAME=nomic-v2
      - MAX_BATCH_SIZE=64
      - REQUEST_TIMEOUT=30
      - CACHE_TTL=3600
      - LOG_LEVEL=INFO
      - PROMETHEUS_ENABLED=true
      - METRICS_PORT=9090
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - neural-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: neural-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - neural-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: neural-grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    networks:
      - neural-network

  # Redis Exporter for Prometheus
  redis-exporter-cache:
    image: oliver006/redis_exporter:latest
    container_name: neural-redis-exporter-cache
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis-cache:6379
      - REDIS_PASSWORD=${REDIS_CACHE_PASSWORD}
    networks:
      - neural-network

  redis-exporter-queue:
    image: oliver006/redis_exporter:latest
    container_name: neural-redis-exporter-queue
    restart: always
    ports:
      - "9122:9121"
    environment:
      - REDIS_ADDR=redis-queue:6379
      - REDIS_PASSWORD=${REDIS_QUEUE_PASSWORD}
    networks:
      - neural-network

volumes:
  redis-cache-data:
    driver: local
  redis-queue-data:
    driver: local
  neo4j-data:
    driver: local
  neo4j-logs:
    driver: local
  neo4j-import:
    driver: local
  neo4j-plugins:
    driver: local
  qdrant-storage:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  neural-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16