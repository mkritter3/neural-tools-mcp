#!/bin/bash
set -e

echo "üß† Neural Indexer Sidecar - End-to-End Test"
echo "============================================"

# Check prerequisites
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running"
    exit 1
fi

if ! which curl > /dev/null 2>&1; then
    echo "‚ùå curl is not installed"
    exit 1
fi

echo "‚úÖ Prerequisites checked"

# Configuration
PROJECT_NAME="test-e2e"
CONTAINER_NAME="test-neural-indexer"
TEST_PORT="8082"

# Cleanup function
cleanup() {
    echo "üßπ Cleaning up..."
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
}

# Set trap for cleanup
trap cleanup EXIT

echo "üì¶ Using production neural indexer container..."
# Assumes the container has already been built and tagged as production
if ! docker image inspect l9-neural-indexer:production > /dev/null 2>&1; then
    echo "‚ùå Production container not found. Building..."
    if ! docker build -f docker/Dockerfile.indexer -t l9-neural-indexer:production .; then
        echo "‚ùå Container build failed"
        exit 1
    fi
fi

echo "‚úÖ Container built successfully"

echo "üöÄ Starting neural indexer container..."

# Start container with minimal configuration for testing
docker run -d \
    --name $CONTAINER_NAME \
    -p $TEST_PORT:8080 \
    -v $(pwd):/workspace:ro \
    -e PROJECT_NAME=$PROJECT_NAME \
    -e PROJECT_PATH=/workspace \
    -e INITIAL_INDEX=false \
    -e LOG_LEVEL=INFO \
    -e NEO4J_URI=bolt://host.docker.internal:47687 \
    -e NEO4J_PASSWORD=graphrag-password \
    -e QDRANT_HOST=host.docker.internal \
    -e QDRANT_PORT=46333 \
    -e EMBEDDING_SERVICE_HOST=host.docker.internal \
    -e EMBEDDING_SERVICE_PORT=48000 \
    l9-neural-indexer:production

echo "‚è≥ Waiting for container startup (30s)..."
sleep 30

# Test health endpoint
echo "üè• Testing health endpoint..."
if curl -s -f http://localhost:$TEST_PORT/health > /dev/null; then
    echo "‚úÖ Health endpoint responds"
else
    echo "‚ùå Health endpoint failed"
    echo "Container logs:"
    docker logs $CONTAINER_NAME --tail 20
    exit 1
fi

# Test status endpoint
echo "üìä Testing status endpoint..."
STATUS_RESPONSE=$(curl -s http://localhost:$TEST_PORT/status)
if echo "$STATUS_RESPONSE" | grep -q "running"; then
    echo "‚úÖ Status endpoint responds correctly"
    echo "Status: $STATUS_RESPONSE"
else
    echo "‚ùå Status endpoint failed"
    echo "Response: $STATUS_RESPONSE"
    exit 1
fi

# Test metrics endpoint
echo "üìà Testing metrics endpoint..."
if curl -s http://localhost:$TEST_PORT/metrics | grep -q "indexer_"; then
    echo "‚úÖ Metrics endpoint provides Prometheus metrics"
else
    echo "‚ùå Metrics endpoint failed"
    exit 1
fi

# Test reindex endpoint
echo "üîÑ Testing reindex endpoint..."
REINDEX_RESPONSE=$(curl -s -X POST "http://localhost:$TEST_PORT/reindex-path?path=/workspace/README.md")
if echo "$REINDEX_RESPONSE" | grep -q -E "(success|queued|error)"; then
    echo "‚úÖ Reindex endpoint responds"
    echo "Reindex response: $REINDEX_RESPONSE"
else
    echo "‚ùå Reindex endpoint failed"
    echo "Response: $REINDEX_RESPONSE"
    exit 1
fi

# Check container logs for any errors
echo "üìã Checking container logs for errors..."
ERROR_COUNT=$(docker logs $CONTAINER_NAME 2>&1 | grep -i error | wc -l)
WARNING_COUNT=$(docker logs $CONTAINER_NAME 2>&1 | grep -i warning | wc -l)

echo "Errors in logs: $ERROR_COUNT"
echo "Warnings in logs: $WARNING_COUNT"

if [ "$ERROR_COUNT" -gt 10 ]; then
    echo "‚ùå Too many errors in container logs (${ERROR_COUNT} > 10)"
    echo "Recent logs:"
    docker logs $CONTAINER_NAME --tail 10
    exit 1
else
    echo "‚úÖ Acceptable error count: $ERROR_COUNT"
fi

# Test graceful shutdown
echo "üõë Testing graceful shutdown..."
docker stop $CONTAINER_NAME > /dev/null

# Wait for shutdown
sleep 5

# Check if container stopped gracefully (exit code 0, 143 for SIGTERM, or 137 for SIGKILL)
EXIT_CODE=$(docker inspect $CONTAINER_NAME --format='{{.State.ExitCode}}')
if [ "$EXIT_CODE" = "0" ] || [ "$EXIT_CODE" = "143" ] || [ "$EXIT_CODE" = "137" ]; then
    echo "‚úÖ Container shutdown successfully (exit code: $EXIT_CODE)"
else
    echo "‚ùå Container did not shutdown properly (exit code: $EXIT_CODE)"
    echo "Last 10 log lines:"
    docker logs $CONTAINER_NAME --tail 10
    exit 1
fi

echo ""
echo "üéâ All indexer tests passed!"
echo "‚úÖ Container builds successfully"
echo "‚úÖ Health endpoint works"
echo "‚úÖ Status endpoint provides metrics"
echo "‚úÖ Prometheus metrics available"
echo "‚úÖ Reindex endpoint responds"
echo "‚úÖ Graceful shutdown works"
echo ""

# Run Neo4j-Qdrant synchronization validation
echo "üîÑ Running Neo4j-Qdrant Synchronization Validation (ADR-053)..."
echo "================================================================"

# Check if sync test script exists
SYNC_TEST_SCRIPT="$(dirname "$0")/test-neo4j-qdrant-sync.py"
if [ -f "$SYNC_TEST_SCRIPT" ]; then
    echo "üìä Starting synchronization validation..."
    echo ""

    # Run the sync validation
    if python3 "$SYNC_TEST_SCRIPT"; then
        echo ""
        echo "‚úÖ Neo4j-Qdrant synchronization validation PASSED"
    else
        echo ""
        echo "‚ùå Neo4j-Qdrant synchronization validation FAILED"
        echo "‚ö†Ô∏è WARNING: Indexer works but databases are not properly synchronized!"
        echo ""
        echo "This means:"
        echo "  ‚Ä¢ Indexer can process files but data ends up in wrong places"
        echo "  ‚Ä¢ GraphRAG hybrid search will return incomplete results"
        echo "  ‚Ä¢ Qdrant may have vectors without corresponding Neo4j nodes"
        echo "  ‚Ä¢ Neo4j may have nodes without corresponding Qdrant vectors"
        echo ""
        echo "Run 'python3 scripts/test-neo4j-qdrant-sync.py' for detailed diagnostics"
        exit 1
    fi
else
    echo "‚ö†Ô∏è WARNING: Synchronization test not found at $SYNC_TEST_SCRIPT"
    echo "Skipping Neo4j-Qdrant synchronization validation"
    echo "This is a critical test per ADR-053 - please ensure it's available!"
fi

echo ""
echo "üèÜ COMPLETE E2E VALIDATION PASSED!"
echo "The neural indexer sidecar with Neo4j-Qdrant synchronization is ready for production deployment!"

cleanup