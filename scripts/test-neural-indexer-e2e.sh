#!/bin/bash
set -e

echo "üß† Neural Indexer Sidecar - End-to-End Test"
echo "============================================"

# Check prerequisites
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker is not running"
    exit 1
fi

if ! which curl > /dev/null 2>&1; then
    echo "‚ùå curl is not installed"
    exit 1
fi

echo "‚úÖ Prerequisites checked"

# Configuration
PROJECT_NAME="test-e2e"
CONTAINER_NAME="test-neural-indexer"
TEST_PORT="8082"

# Cleanup function
cleanup() {
    echo "üßπ Cleaning up..."
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
}

# Set trap for cleanup
trap cleanup EXIT

echo "üì¶ Building neural indexer container..."
if ! docker build -f docker/Dockerfile.indexer -t l9-neural-indexer:e2e-test . > /dev/null 2>&1; then
    echo "‚ùå Container build failed"
    exit 1
fi

echo "‚úÖ Container built successfully"

echo "üöÄ Starting neural indexer container..."

# Start container with minimal configuration for testing
docker run -d \
    --name $CONTAINER_NAME \
    -p $TEST_PORT:8080 \
    -v $(pwd):/workspace:ro \
    -e PROJECT_NAME=$PROJECT_NAME \
    -e PROJECT_PATH=/workspace \
    -e INITIAL_INDEX=false \
    -e LOG_LEVEL=INFO \
    -e NEO4J_URI=bolt://localhost:7687 \
    -e QDRANT_HOST=localhost \
    -e EMBEDDING_SERVICE_HOST=localhost \
    l9-neural-indexer:e2e-test

echo "‚è≥ Waiting for container startup (30s)..."
sleep 30

# Test health endpoint
echo "üè• Testing health endpoint..."
if curl -s -f http://localhost:$TEST_PORT/health > /dev/null; then
    echo "‚úÖ Health endpoint responds"
else
    echo "‚ùå Health endpoint failed"
    echo "Container logs:"
    docker logs $CONTAINER_NAME --tail 20
    exit 1
fi

# Test status endpoint
echo "üìä Testing status endpoint..."
STATUS_RESPONSE=$(curl -s http://localhost:$TEST_PORT/status)
if echo "$STATUS_RESPONSE" | grep -q "running"; then
    echo "‚úÖ Status endpoint responds correctly"
    echo "Status: $STATUS_RESPONSE"
else
    echo "‚ùå Status endpoint failed"
    echo "Response: $STATUS_RESPONSE"
    exit 1
fi

# Test metrics endpoint
echo "üìà Testing metrics endpoint..."
if curl -s http://localhost:$TEST_PORT/metrics | grep -q "indexer_"; then
    echo "‚úÖ Metrics endpoint provides Prometheus metrics"
else
    echo "‚ùå Metrics endpoint failed"
    exit 1
fi

# Test reindex endpoint
echo "üîÑ Testing reindex endpoint..."
REINDEX_RESPONSE=$(curl -s -X POST "http://localhost:$TEST_PORT/reindex-path?path=/workspace/README.md")
if echo "$REINDEX_RESPONSE" | grep -q -E "(success|queued|error)"; then
    echo "‚úÖ Reindex endpoint responds"
    echo "Reindex response: $REINDEX_RESPONSE"
else
    echo "‚ùå Reindex endpoint failed"
    echo "Response: $REINDEX_RESPONSE"
    exit 1
fi

# Check container logs for any errors
echo "üìã Checking container logs for errors..."
ERROR_COUNT=$(docker logs $CONTAINER_NAME 2>&1 | grep -i error | wc -l)
WARNING_COUNT=$(docker logs $CONTAINER_NAME 2>&1 | grep -i warning | wc -l)

echo "Errors in logs: $ERROR_COUNT"
echo "Warnings in logs: $WARNING_COUNT"

if [ "$ERROR_COUNT" -gt 5 ]; then
    echo "‚ùå Too many errors in container logs"
    echo "Recent logs:"
    docker logs $CONTAINER_NAME --tail 10
    exit 1
fi

# Test graceful shutdown
echo "üõë Testing graceful shutdown..."
docker stop $CONTAINER_NAME > /dev/null

# Wait for shutdown
sleep 5

# Check if container stopped gracefully (exit code 0 or 143 for SIGTERM)
EXIT_CODE=$(docker inspect $CONTAINER_NAME --format='{{.State.ExitCode}}')
if [ "$EXIT_CODE" = "0" ] || [ "$EXIT_CODE" = "143" ]; then
    echo "‚úÖ Container shutdown gracefully (exit code: $EXIT_CODE)"
else
    echo "‚ùå Container did not shutdown gracefully (exit code: $EXIT_CODE)"
    echo "Last 10 log lines:"
    docker logs $CONTAINER_NAME --tail 10
    exit 1
fi

echo ""
echo "üéâ All tests passed!"
echo "‚úÖ Container builds successfully"
echo "‚úÖ Health endpoint works"
echo "‚úÖ Status endpoint provides metrics"
echo "‚úÖ Prometheus metrics available"
echo "‚úÖ Reindex endpoint responds"
echo "‚úÖ Graceful shutdown works"
echo ""
echo "The neural indexer sidecar container is ready for production deployment!"

cleanup