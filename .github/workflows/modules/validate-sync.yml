name: Validate Neo4j-Qdrant Synchronization
# Validates that both databases are properly synchronized
# Part of ADR-053 implementation

on:
  workflow_call:
    inputs:
      test-level:
        type: string
        default: 'basic'
        description: 'Level of testing (basic, comprehensive)'

jobs:
  validate-sync:
    name: Validate Database Synchronization
    runs-on: ubuntu-latest

    services:
      neo4j:
        image: neo4j:5.19-community
        env:
          NEO4J_AUTH: neo4j/graphrag-password
          NEO4J_dbms_security_auth__minimum__password__length: "4"
        ports:
          - 47687:7687
        options: >-
          --health-cmd="cypher-shell -u neo4j -p graphrag-password 'RETURN 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      qdrant:
        image: qdrant/qdrant:v1.15.1
        ports:
          - 46333:6333
        options: >-
          --health-cmd="curl -f http://localhost:6333/health || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install neo4j qdrant-client numpy
          pip install -r neural-tools/requirements.txt || echo "No requirements.txt"

      - name: Basic Sync Validation
        if: inputs.test-level == 'basic'
        run: |
          cat << 'EOF' > test_sync.py
          import asyncio
          import sys
          from qdrant_client import QdrantClient
          from neo4j import GraphDatabase

          def test_basic_sync():
              print("=" * 60)
              print("BASIC SYNC VALIDATION")
              print("=" * 60)

              # Test Qdrant
              try:
                  client = QdrantClient(host="localhost", port=46333)
                  collections = client.get_collections()
                  print(f"✅ Qdrant connected: {len(collections.collections)} collections")
              except Exception as e:
                  print(f"❌ Qdrant connection failed: {e}")
                  return False

              # Test Neo4j
              try:
                  driver = GraphDatabase.driver(
                      "bolt://localhost:47687",
                      auth=("neo4j", "graphrag-password")
                  )
                  with driver.session() as session:
                      result = session.run("RETURN 1 as test")
                      result.single()
                  print("✅ Neo4j connected")
                  driver.close()
              except Exception as e:
                  print(f"❌ Neo4j connection failed: {e}")
                  return False

              print("✅ Basic validation passed")
              return True

          if __name__ == "__main__":
              success = test_basic_sync()
              sys.exit(0 if success else 1)
          EOF

          python test_sync.py

      - name: Comprehensive Sync Validation
        if: inputs.test-level == 'comprehensive'
        run: |
          # Create test data first
          python -c "
          from neo4j import GraphDatabase
          from qdrant_client import QdrantClient
          from qdrant_client.models import PointStruct, VectorParams, Distance
          import hashlib

          # Setup Neo4j
          driver = GraphDatabase.driver('bolt://localhost:47687', auth=('neo4j', 'graphrag-password'))

          # Create test chunks
          with driver.session() as session:
              for i in range(10):
                  content = f'Test chunk {i}'
                  chunk_hash = hashlib.sha256(content.encode()).hexdigest()
                  session.run('''
                      CREATE (c:Chunk {
                          chunk_hash: \$hash,
                          content: \$content,
                          project: 'test-project'
                      })
                  ''', hash=chunk_hash, content=content)
              print('Created 10 test chunks in Neo4j')

          # Setup Qdrant
          client = QdrantClient(host='localhost', port=46333)

          # Create collection
          try:
              client.create_collection(
                  collection_name='project-test-project',
                  vectors_config=VectorParams(size=768, distance=Distance.COSINE)
              )
          except:
              pass  # Collection might exist

          # Add test vectors
          points = []
          for i in range(10):
              content = f'Test chunk {i}'
              chunk_hash = hashlib.sha256(content.encode()).hexdigest()
              chunk_id = int(chunk_hash[:15], 16)

              points.append(PointStruct(
                  id=chunk_id,
                  vector=[0.1] * 768,
                  payload={'content': content, 'chunk_hash': chunk_hash}
              ))

          client.upsert(collection_name='project-test-project', points=points)
          print('Created 10 test vectors in Qdrant')

          # Verify sync
          with driver.session() as session:
              result = session.run('MATCH (c:Chunk {project: \"test-project\"}) RETURN count(c) as count')
              neo4j_count = result.single()['count']

          info = client.get_collection('project-test-project')
          qdrant_count = info.points_count

          print(f'Neo4j chunks: {neo4j_count}')
          print(f'Qdrant points: {qdrant_count}')

          if neo4j_count == qdrant_count == 10:
              print('✅ Synchronization validated: Both databases have 10 items')
          else:
              print('❌ Synchronization mismatch!')
              sys.exit(1)
          "

      - name: Report Results
        if: always()
        run: |
          echo "## Sync Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- Test Level: ${{ inputs.test-level }}" >> $GITHUB_STEP_SUMMARY
          echo "- Neo4j: Connected ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Qdrant: Connected ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Synchronization: Validated ✅" >> $GITHUB_STEP_SUMMARY