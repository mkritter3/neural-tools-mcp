name: Neural Tools CI/CD Pipeline
# Main orchestrator workflow - composes modular workflows

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'dev/**'
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip tests (deploy only)'
        type: boolean
        default: false
      deploy-environment:
        description: 'Deployment environment'
        type: choice
        options:
          - production
          - staging
          - development
        default: production

# Cancel in-progress runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== STAGE 0: PRE-FLIGHT CHECKS ====================
  preflight:
    name: üöÄ Pre-flight Environment Validation
    if: ${{ !inputs.skip-tests }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run Pre-flight Checks
        run: |
          # Export environment variables explicitly for validation script
          export CI=true
          export NEO4J_URI="bolt://localhost:47687"
          export NEO4J_PASSWORD="graphrag-password"
          export QDRANT_HOST="localhost"
          export QDRANT_PORT="46333"
          export EMBEDDING_SERVICE_HOST="localhost"
          export EMBEDDING_SERVICE_PORT="48000"

          # Run with ONLY src in path, like production MCP
          PYTHONPATH=./neural-tools/src python3 ci/validate_environment.py

  # ==================== STAGE 1: CODE QUALITY ====================
  lint:
    name: üßπ Lint
    if: ${{ !inputs.skip-tests }}
    needs: preflight
    uses: ./.github/workflows/modules/lint.yml
    with:
      python-version: '3.11'
      working-directory: 'neural-tools'

  # ==================== STAGE 2: UNIT TESTS ====================
  unit-tests:
    name: üß™ Unit Tests
    if: ${{ !inputs.skip-tests }}
    needs: lint
    uses: ./.github/workflows/modules/unit-tests.yml
    with:
      python-versions: '["3.10", "3.11", "3.12"]'
      working-directory: 'neural-tools'
      coverage-threshold: 75  # Realistic threshold

  # ==================== STAGE 3: INTEGRATION TESTS ====================
  integration-tests:
    name: üîó Integration Tests
    if: ${{ !inputs.skip-tests }}
    needs: lint
    uses: ./.github/workflows/modules/integration-tests.yml
    with:
      neo4j-version: '5.22.0'
      qdrant-version: 'v1.12.5'
      python-version: '3.11'

  # ==================== STAGE 3.5: NAMING CONSISTENCY ====================
  naming-consistency:
    name: üîç Naming Consistency (ADR-057)
    if: ${{ !inputs.skip-tests }}
    needs: lint
    uses: ./.github/workflows/modules/naming-consistency.yml
    with:
      python-version: '3.11'

  # ==================== STAGE 4: CRITICAL REGRESSION TESTS ====================
  regression-tests:
    name: üî• Critical Regression Tests
    if: ${{ !inputs.skip-tests }}
    needs: [unit-tests, integration-tests]
    uses: ./.github/workflows/modules/regression-tests.yml
    with:
      python-version: '3.11'

  # ==================== STAGE 5: ADR-053 SYNC VALIDATION ====================
  sync-validation:
    name: üîÑ ADR-053 Sync Validation
    if: ${{ !inputs.skip-tests }}
    needs: [unit-tests, integration-tests, regression-tests]
    uses: ./.github/workflows/modules/sync-validation.yml
    with:
      sync-rate-threshold: 95

  # ==================== STAGE 6: SELF-HEALING TESTS (ADR-054) ====================
  self-healing-tests:
    name: üîß Self-Healing & Observability Tests
    if: ${{ !inputs.skip-tests }}
    needs: [sync-validation]
    uses: ./.github/workflows/modules/self-healing-tests.yml
    with:
      python-version: '3.11'
      node-version: '18'

  # ==================== STAGE 7: DOCKER E2E ====================
  docker-e2e:
    name: üê≥ Docker E2E
    if: ${{ !inputs.skip-tests }}
    needs: [unit-tests]
    uses: ./.github/workflows/modules/docker-e2e.yml
    with:
      test-timeout: 300

  # ==================== STAGE 8: ADR VALIDATION ====================
  adr-validation:
    name: üìã ADR Validation
    if: ${{ !inputs.skip-tests }}
    needs: [unit-tests, integration-tests]
    uses: ./.github/workflows/modules/adr-validation.yml
    with:
      adr-list: '["0029", "0037", "0043", "0044", "0050", "0052", "0053", "0054", "0057", "0058"]'

  # ==================== GATE: ALL TESTS MUST PASS ====================
  validation-gate:
    name: ‚úÖ Validation Gate
    runs-on: ubuntu-latest
    needs:
      - lint
      - unit-tests
      - integration-tests
      - naming-consistency
      - regression-tests
      - sync-validation
      - self-healing-tests
      - docker-e2e
      - adr-validation
    if: always()

    steps:
      - name: Check all tests passed
        run: |
          # Check if any required job failed
          if [[ "${{ needs.lint.result }}" == "failure" ]] || \
             [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.naming-consistency.result }}" == "failure" ]] || \
             [[ "${{ needs.regression-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.sync-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.self-healing-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.docker-e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.adr-validation.result }}" == "failure" ]]; then
            echo "‚ùå One or more validation checks failed"
            exit 1
          fi

          echo "‚úÖ All validation checks passed"

  # ==================== STAGE 9: DEPLOYMENT ====================
  deploy:
    name: üöÄ Deploy
    needs: validation-gate
    if: |
      success() &&
      (github.ref == 'refs/heads/main' || github.event.inputs.deploy-environment)
    uses: ./.github/workflows/modules/deploy.yml
    with:
      environment: ${{ github.event.inputs.deploy-environment || 'production' }}
      create-release: ${{ github.ref == 'refs/heads/main' }}
    secrets: inherit

  # ==================== NOTIFICATION ====================
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [validation-gate, deploy]
    if: always()

    steps:
      - name: Create summary
        run: |
          echo "## Neural Tools CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Test results
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üßπ Lint | ${{ needs.lint.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üß™ Unit Tests | ${{ needs.unit-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîó Integration Tests | ${{ needs.integration-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Naming Consistency | ${{ needs.naming-consistency.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üî• Regression Tests | ${{ needs.regression-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Sync Validation | ${{ needs.sync-validation.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üê≥ Docker E2E | ${{ needs.docker-e2e.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìã ADR Validation | ${{ needs.adr-validation.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Coverage if available
          if [[ -n "${{ needs.unit-tests.outputs.coverage }}" ]]; then
            echo "### Code Coverage" >> $GITHUB_STEP_SUMMARY
            echo "Coverage: ${{ needs.unit-tests.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Sync rate if available
          if [[ -n "${{ needs.sync-validation.outputs.sync-rate }}" ]]; then
            echo "### ADR-053 Compliance" >> $GITHUB_STEP_SUMMARY
            echo "Sync Rate: ${{ needs.sync-validation.outputs.sync-rate }}%" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Deployment info
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "### Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "- Version: \`${{ needs.deploy.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Branch: \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "### Deployment" >> $GITHUB_STEP_SUMMARY
            echo "- ‚è≠Ô∏è Deployment skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"